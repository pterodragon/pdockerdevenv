FROM ghcr.io/greyltc/archlinux-aur:paru as base

RUN pacman -Sy
RUN pacman -S --noconfirm base-devel
RUN pacman -S --noconfirm zsh
RUN pacman -S --noconfirm tmux
RUN pacman -S --noconfirm git cmake ripgrep meld neovim tree
RUN pacman -S --noconfirm ccls llvm
RUN pacman -S --noconfirm make
RUN pacman -S --noconfirm pyenv

ARG UNAME=testuser
ARG UID
ARG GID
RUN groupadd -g $GID -o $UNAME
RUN useradd -m -u $UID -g $GID -o -s /bin/zsh -G wheel $UNAME 
RUN echo '%wheel ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers
RUN echo "$UNAME ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
RUN sed -i '/PKGDEST=/c\PKGDEST=/var/cache/makepkg/custom' -i /etc/makepkg.conf
RUN mkdir -p /var/cache/makepkg/custom
RUN chown $UID:$GID /var/cache/makepkg/custom
USER $UNAME

RUN zsh -c 'paru -S --removemake --needed --noprogressbar --noconfirm bear'

FROM base as base-resources

USER root

RUN mkdir -p ~/Documents/github
RUN git clone https://github.com/pterodragon/config-files ~/Documents/github/config-files
# RUN git clone https://github.com/pyenv/pyenv.git ~/Documents/github/pyenv  # use arch package instead
# RUN git clone https://github.com/pyenv/pyenv-virtualenv.git ~/Documents/github/pyenv-virtualenv  # use AUR package instead
RUN git clone https://github.com/gpakosz/.tmux.git ~/Documents/github/tmux

FROM base as main
ARG UNAME=testuser
ARG UID
ARG GID
USER $UNAME

ENV PYENV_ROOT "/home/$UNAME/.pyenv"
ENV PATH "$PYENV_ROOT/bin:$PATH"
ARG PYENV_DEFAULT_VERSION=3.9.5

# copy resources & config files
RUN mkdir -p ~/Documents/github
COPY --from=base-resources --chown=$UID:$GID /root/Documents/github /home/$UNAME/Documents/github/
# COPY --from=base-resources /root/Documents/github/config-files /home/$UNAME/Documents/github/config-files
RUN cp -r ~/Documents/github/config-files/. ~/

# install pyenv
RUN pyenv install $PYENV_DEFAULT_VERSION
RUN zsh -c 'paru -S --removemake --needed --noprogressbar --noconfirm pyenv-virtualenv'
# COPY --from=base-resources /root/Documents/github/pyenv-virtualenv $PYENV_ROOT/plugins/pyenv-virtualenv
RUN pyenv virtualenv $PYENV_DEFAULT_VERSION general
RUN pyenv global general

# install node, required before neovim plugins
ENV NVM_DIR /usr/local/nvm
USER root
RUN mkdir -p $NVM_DIR
ENV NODE_VERSION 14.17.1
RUN curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
RUN bash -c "source $NVM_DIR/nvm.sh && nvm install $NODE_VERSION && nvm alias default $NODE_VERSION && nvm use default"
ENV NODE_PATH $NVM_DIR/v$NODE_VERSION/lib/node_modules
ENV PATH $NVM_DIR/versions/node/v$NODE_VERSION/bin:$PATH
RUN node -v
RUN npm -v
RUN npm install --global yarn
USER $UNAME

# tmux
RUN cp -r ~/Documents/github/tmux ~/.tmux
RUN ln -s -f .tmux/.tmux.conf ~

# zsh
RUN rm -r ~/.oh-my-zsh  # add it later
RUN sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
RUN git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
RUN cp -r ~/Documents/github/config-files/.oh-my-zsh/* ~/.oh-my-zsh/
ENV PATH $PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH
RUN cp ~/Documents/github/config-files/.zshrc ~/  # reinstate my own zshrc

# neovim & plugins
RUN pip3 install neovim  # PATH has to have pip3 by pyenv
RUN pip3 install jedi
RUN sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
RUN nvim --headless +"PlugInstall" +qa
RUN mkdir -p ~/.config/coc/extensions
RUN cd ~/.config/coc/extensions && yarn add coc-pyright

# git configs
ARG GIT_GLOBAL_USER_NAME
ARG GIT_GLOBAL_USER_EMAIL
ARG GIT_GLOBAL_USER_USER_NAME
RUN git config --global user.name $GIT_GLOBAL_USER_NAME
RUN git config --global user.email $GIT_GLOBAL_USER_EMAIL
RUN git config --global user.username $GIT_GLOBAL_USER_USER_NAME
LABEL VERSION="0.0.1"

# to build
# export UID=$(id -u)
# export GID=$(id -g)
# docker-compose build
